{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\AddTask\\\\OpenTask\\\\Model.js\";\nimport React, { useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport MathJax from '../../MathJax';\nimport { addTaskModel } from '../../../../redux/actions/newTask';\nimport { connect } from 'react-redux';\n\nconst Model = ({\n  addTaskModel,\n  variabels,\n  modelFromState\n}) => {\n  const [model, setModel] = useState('');\n  const [isModelValid, setModelValid] = useState(false);\n\n  const validateModel = () => {\n    let isModelCorrect = true;\n\n    for (let i in model) {\n      if (model[i].match(/[a-zA-Z]+/g)) {\n        isModelCorrect = variabels.some(({\n          variable\n        }) => {\n          return variable === model[i];\n        });\n      }\n    }\n\n    for (let i in model) {\n      if (model[i].match(/[a-zA-Z]+/g)) {\n        if (1 + parseInt(i) <= model.length - 1) {\n          if (model[parseInt(i) + 1].match(/[a-zA-Z]+/g) || model[parseInt(i) + 1].match(/[0-9]+/g)) isModelCorrect = false;\n        }\n      }\n    }\n\n    ;\n    if (!model.length) setModelValid(true);else if (isModelCorrect) {\n      setModelValid(false);\n      addTaskModel(model);\n    } else setModelValid(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Wz\\xF3r\"), /*#__PURE__*/React.createElement(TextareaAutosize, {\n    value: model,\n    onChange: e => setModel(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), isModelValid && /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 24\n    }\n  }, \"Wz\\xF3r powinien zawiera\\u0107 zdefiniowane zmienne\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => validateModel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Dodaj wz\\xF3r\"), modelFromState.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }\n  }, \"Tw\\xF3j wz\\xF3r: \", modelFromState), /*#__PURE__*/React.createElement(MathJax, {\n    model: model,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  modelFromState: state.newTask.model,\n  variables: state.newTask.variables\n});\n\nexport default connect(mapStateToProps, {\n  addTaskModel\n})(Model);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/AddTask/OpenTask/Model.js"],"names":["React","useState","TextareaAutosize","MathJax","addTaskModel","connect","Model","variabels","modelFromState","model","setModel","isModelValid","setModelValid","validateModel","isModelCorrect","i","match","some","variable","parseInt","length","e","target","value","mapStateToProps","state","newTask","variables"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport MathJax from '../../MathJax';\r\nimport { addTaskModel } from '../../../../redux/actions/newTask';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Model = ({addTaskModel, variabels, modelFromState}) => {\r\n  const [model, setModel] = useState('');\r\n  const [isModelValid, setModelValid] = useState(false);\r\n\r\n  const validateModel = () => {\r\n    let isModelCorrect = true;\r\n    for(let i in model){\r\n      if(model[i].match(/[a-zA-Z]+/g)){\r\n        isModelCorrect = variabels.some( ({variable}) =>{\r\n          return variable === model[i]\r\n        });\r\n      }\r\n    }\r\n\r\n    for(let i in model){\r\n      if(model[i].match(/[a-zA-Z]+/g)){\r\n        if(1+parseInt(i) <= model.length-1){\r\n          if(model[parseInt(i)+1].match(/[a-zA-Z]+/g) ||\r\n              model[parseInt(i)+1].match(/[0-9]+/g)\r\n          ) isModelCorrect = false;\r\n        }\r\n      }\r\n    };\r\n\r\n    if(!model.length) setModelValid(true);\r\n    else if(isModelCorrect){\r\n      setModelValid(false);\r\n      addTaskModel(model)\r\n    }\r\n    else setModelValid(true);\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <h5>Wzór</h5>\r\n      <TextareaAutosize\r\n        value={model}\r\n        onChange={e => setModel(e.target.value)}\r\n      />\r\n      {isModelValid && <h4>Wzór powinien zawierać zdefiniowane zmienne</h4>}\r\n      <button onClick={()=> validateModel()}>Dodaj wzór</button>\r\n      { modelFromState.length>0 && <div>Twój wzór: {modelFromState}</div> }\r\n      <MathJax model={model}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  modelFromState: state.newTask.model,\r\n  variables: state.newTask.variables\r\n})\r\n\r\nexport default connect(mapStateToProps,{addTaskModel})(Model);\r\n"]},"metadata":{},"sourceType":"module"}