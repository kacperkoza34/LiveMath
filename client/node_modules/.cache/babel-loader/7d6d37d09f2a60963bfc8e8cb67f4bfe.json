{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\AddTaskToClass\\\\AddTaskToClass\\\\AddTaskToClass.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./AddTaskToClass.module.scss\";\nimport { connect } from \"react-redux\";\nimport { addOpenTask, addCloseTask, addBooleanTask, clearTask } from \"../../../../redux/actions/taskToClass\";\nimport SelectClass from \"../SelectClass/SelectClass\";\nimport SelectDeadLine from \"../SelectDeadLine/SelectDeadLine\";\nimport SelectPrompt from \"../SelectPrompt/SelectPrompt\";\n\nconst AddTaskToClass = ({\n  taskId,\n  points,\n  taskType,\n  taskParams,\n  addOpenTask,\n  addBooleanTask,\n  addCloseTask,\n  success,\n  clearTask\n}) => {\n  const {\n    descriptionRequired,\n    promptsAllowed,\n    deadLine,\n    classes\n  } = taskParams;\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    return () => clearTask();\n  }, []);\n\n  const submitOpenTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addOpenTask({\n        taskId,\n        descriptionRequired,\n        promptsAllowed,\n        deadLine,\n        classes,\n        points\n      });\n    } else setError(true);\n  };\n\n  const submitCloseTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addCloseTask({\n        taskId,\n        deadLine,\n        classes\n      });\n    } else setError(true);\n  };\n\n  const submitBooleanTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addBooleanTask({\n        taskId,\n        points,\n        deadLine,\n        classes\n      });\n    } else setError(true);\n  };\n\n  const displayError = () => {\n    return error && /*#__PURE__*/React.createElement(\"h5\", {\n      className: styles.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Wybierz klasy i termin wykonania\");\n  };\n\n  return success ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: styles.success,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Dodano zadanie\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Dodaj zadanie do klas\"), /*#__PURE__*/React.createElement(SelectClass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SelectDeadLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), taskType === \"openTask\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SelectPrompt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, displayError(), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => submitOpenTask(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Dodaj zadnie do klas\"))), taskType === \"closeTask\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, displayError(), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => submitCloseTask(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Dodaj zadnie do klas\"))), taskType === \"booleanTask\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, displayError(), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => submitBooleanTask(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Dodaj zadnie do klas\"))));\n};\n\nconst mapStateToProps = state => ({\n  taskId: state.tasks.data._id,\n  points: state.tasks.data.points,\n  taskType: state.tasks.data.taskType,\n  taskParams: state.addTaskToClass.data,\n  success: state.addTaskToClass.success\n});\n\nexport default connect(mapStateToProps, {\n  addOpenTask,\n  addCloseTask,\n  addBooleanTask,\n  clearTask\n})(AddTaskToClass);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/AddTaskToClass/AddTaskToClass/AddTaskToClass.js"],"names":["React","useState","useEffect","PropTypes","styles","connect","addOpenTask","addCloseTask","addBooleanTask","clearTask","SelectClass","SelectDeadLine","SelectPrompt","AddTaskToClass","taskId","points","taskType","taskParams","success","descriptionRequired","promptsAllowed","deadLine","classes","error","setError","submitOpenTask","length","submitCloseTask","submitBooleanTask","displayError","root","mapStateToProps","state","tasks","data","_id","addTaskToClass"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,SAJF,QAKO,uCALP;AAMA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,MADsB;AAEtBC,EAAAA,MAFsB;AAGtBC,EAAAA,QAHsB;AAItBC,EAAAA,UAJsB;AAKtBX,EAAAA,WALsB;AAMtBE,EAAAA,cANsB;AAOtBD,EAAAA,YAPsB;AAQtBW,EAAAA,OARsB;AAStBT,EAAAA;AATsB,CAAD,KAUjB;AACJ,QAAM;AAAEU,IAAAA,mBAAF;AAAuBC,IAAAA,cAAvB;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,MAA6DL,UAAnE;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAMO,SAAS,EAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMgB,cAAc,GAAG,MAAM;AAC3B,QAAIJ,QAAQ,CAACK,MAAT,IAAmBJ,OAAO,CAACI,MAA/B,EAAuC;AACrCF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAlB,MAAAA,WAAW,CAAC;AACVQ,QAAAA,MADU;AAEVK,QAAAA,mBAFU;AAGVC,QAAAA,cAHU;AAIVC,QAAAA,QAJU;AAKVC,QAAAA,OALU;AAMVP,QAAAA;AANU,OAAD,CAAX;AAQD,KAVD,MAUOS,QAAQ,CAAC,IAAD,CAAR;AACR,GAZD;;AAcA,QAAMG,eAAe,GAAG,MAAM;AAC5B,QAAIN,QAAQ,CAACK,MAAT,IAAmBJ,OAAO,CAACI,MAA/B,EAAuC;AACrCF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAjB,MAAAA,YAAY,CAAC;AACXO,QAAAA,MADW;AAEXO,QAAAA,QAFW;AAGXC,QAAAA;AAHW,OAAD,CAAZ;AAKD,KAPD,MAOOE,QAAQ,CAAC,IAAD,CAAR;AACR,GATD;;AAWA,QAAMI,iBAAiB,GAAG,MAAM;AAC9B,QAAIP,QAAQ,CAACK,MAAT,IAAmBJ,OAAO,CAACI,MAA/B,EAAuC;AACrCF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAhB,MAAAA,cAAc,CAAC;AACbM,QAAAA,MADa;AAEbC,QAAAA,MAFa;AAGbM,QAAAA,QAHa;AAIbC,QAAAA;AAJa,OAAD,CAAd;AAMD,KARD,MAQOE,QAAQ,CAAC,IAAD,CAAR;AACR,GAVD;;AAYA,QAAMK,YAAY,GAAG,MAAM;AACzB,WACEN,KAAK,iBACH;AAAI,MAAA,SAAS,EAAEnB,MAAM,CAACmB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAFJ;AAKD,GAND;;AAOA,SAAOL,OAAO,gBACZ;AAAK,IAAA,SAAS,EAAEd,MAAM,CAAC0B,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAE1B,MAAM,CAACc,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADY,gBAKZ;AAAK,IAAA,SAAS,EAAEd,MAAM,CAAC0B,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIGd,QAAQ,KAAK,UAAb,iBACC,uDACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,YAAY,EADf,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,cAAc,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CAFF,CALJ,EAeGT,QAAQ,KAAK,WAAb,iBACC,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,YAAY,EADf,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAMF,eAAe,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CADF,CAhBJ,EAyBGX,QAAQ,KAAK,aAAb,iBACC,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,YAAY,EADf,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAMD,iBAAiB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CADF,CA1BJ,CALF;AA0CD,CAxGD;;AA0GA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAClClB,EAAAA,MAAM,EAAEkB,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,GADS;AAElCpB,EAAAA,MAAM,EAAEiB,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBnB,MAFS;AAGlCC,EAAAA,QAAQ,EAAEgB,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBlB,QAHO;AAIlCC,EAAAA,UAAU,EAAEe,KAAK,CAACI,cAAN,CAAqBF,IAJC;AAKlChB,EAAAA,OAAO,EAAEc,KAAK,CAACI,cAAN,CAAqBlB;AALI,CAAZ,CAAxB;;AAQA,eAAeb,OAAO,CAAC0B,eAAD,EAAkB;AACtCzB,EAAAA,WADsC;AAEtCC,EAAAA,YAFsC;AAGtCC,EAAAA,cAHsC;AAItCC,EAAAA;AAJsC,CAAlB,CAAP,CAKZI,cALY,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./AddTaskToClass.module.scss\";\nimport { connect } from \"react-redux\";\nimport {\n  addOpenTask,\n  addCloseTask,\n  addBooleanTask,\n  clearTask,\n} from \"../../../../redux/actions/taskToClass\";\nimport SelectClass from \"../SelectClass/SelectClass\";\nimport SelectDeadLine from \"../SelectDeadLine/SelectDeadLine\";\nimport SelectPrompt from \"../SelectPrompt/SelectPrompt\";\n\nconst AddTaskToClass = ({\n  taskId,\n  points,\n  taskType,\n  taskParams,\n  addOpenTask,\n  addBooleanTask,\n  addCloseTask,\n  success,\n  clearTask,\n}) => {\n  const { descriptionRequired, promptsAllowed, deadLine, classes } = taskParams;\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    return () => clearTask();\n  }, []);\n\n  const submitOpenTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addOpenTask({\n        taskId,\n        descriptionRequired,\n        promptsAllowed,\n        deadLine,\n        classes,\n        points,\n      });\n    } else setError(true);\n  };\n\n  const submitCloseTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addCloseTask({\n        taskId,\n        deadLine,\n        classes,\n      });\n    } else setError(true);\n  };\n\n  const submitBooleanTask = () => {\n    if (deadLine.length && classes.length) {\n      setError(false);\n      addBooleanTask({\n        taskId,\n        points,\n        deadLine,\n        classes,\n      });\n    } else setError(true);\n  };\n\n  const displayError = () => {\n    return (\n      error && (\n        <h5 className={styles.error}>Wybierz klasy i termin wykonania</h5>\n      )\n    );\n  };\n  return success ? (\n    <div className={styles.root}>\n      <h3 className={styles.success}>Dodano zadanie</h3>\n    </div>\n  ) : (\n    <div className={styles.root}>\n      <h3>Dodaj zadanie do klas</h3>\n      <SelectClass />\n      <SelectDeadLine />\n      {taskType === \"openTask\" && (\n        <>\n          <SelectPrompt />\n          <div>\n            {displayError()}\n            <button onClick={() => submitOpenTask()}>\n              Dodaj zadnie do klas\n            </button>\n          </div>\n        </>\n      )}\n      {taskType === \"closeTask\" && (\n        <>\n          <div>\n            {displayError()}\n            <button onClick={() => submitCloseTask()}>\n              Dodaj zadnie do klas\n            </button>\n          </div>\n        </>\n      )}\n      {taskType === \"booleanTask\" && (\n        <>\n          <div>\n            {displayError()}\n            <button onClick={() => submitBooleanTask()}>\n              Dodaj zadnie do klas\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  taskId: state.tasks.data._id,\n  points: state.tasks.data.points,\n  taskType: state.tasks.data.taskType,\n  taskParams: state.addTaskToClass.data,\n  success: state.addTaskToClass.success,\n});\n\nexport default connect(mapStateToProps, {\n  addOpenTask,\n  addCloseTask,\n  addBooleanTask,\n  clearTask,\n})(AddTaskToClass);\n"]},"metadata":{},"sourceType":"module"}