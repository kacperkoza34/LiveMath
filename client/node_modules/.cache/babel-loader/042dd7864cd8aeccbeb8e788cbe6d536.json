{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\CloseTask\\\\CloseTaskFromApi.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./CloseTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport MathJax from \"../../MathJax\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport SendSolution from \"./SendSolution/SendSolution\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport ReviewTask from \"../ReviewTask/ReviewTask\";\nimport { connect } from \"react-redux\";\nimport { getCloseTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\nimport { updateDescription, updateAnswer, sendCloseTaskResolution } from \"../../../../redux/actions/resolveTask\";\n\nconst CloseTaskFromApi = ({\n  match,\n  getCloseTask,\n  accountType,\n  setTaskConfig,\n  updateDescription,\n  updateAnswer,\n  sendCloseTaskResolution,\n  student,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig\n  }\n}) => {\n  useEffect(() => {\n    getCloseTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n  const {\n    answer,\n    description,\n    descriptionRequired,\n    resolved,\n    toUpdate,\n    _id\n  } = taskConfig;\n  const answers = {};\n  const [taskStatus, setTaskStatus] = useState(null);\n  const [checkAnswers, setChekAnswers] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const prepareState = () => {\n    data.data.forEach((item, i) => {\n      answers[`${i}`] = \"\";\n    });\n    setTaskStatus({ ...answers\n    });\n  };\n\n  const onChange = e => {\n    setChekAnswers(false);\n    setTaskStatus({ ...taskStatus,\n      [e.target.name]: e.target.value\n    });\n    updateAnswer({ ...taskStatus,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  let result = 0;\n\n  const displayResult = () => {\n    result = 0;\n    data.data.forEach(({\n      answer\n    }, i) => answer == taskStatus[i] && result++);\n    return `Wynik: ${result}/${Object.keys(taskStatus).length}`;\n  };\n\n  const sendSolution = (result, toUpdate = false) => {\n    if (descriptionRequired && !description.length) setError(\"Wymagany opis!\");else {\n      if (toUpdate) sendCloseTaskResolution({ ...taskConfig,\n        toUpdate,\n        result\n      });else sendCloseTaskResolution({ ...taskConfig,\n        toUpdate,\n        result\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, isFetching ? /*#__PURE__*/React.createElement(BeatLoader, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, taskStatus === null && prepareState(), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, data.content), /*#__PURE__*/React.createElement(\"p\", {\n    className: styles.points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Punkty: \", data.points), taskStatus && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, data.data.map(({\n    content,\n    answer: correctAnswer\n  }, i) => /*#__PURE__*/React.createElement(\"li\", {\n    className: styles.listElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.order,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, `${i + 1}). `, /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + content + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  })), \"Podaj odpowiedz:\", /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    autocomplete: \"off\",\n    name: `${i}`,\n    value: answer[`${i}`],\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 23\n    }\n  }, \"Twoja odpowiedz:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.result,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + answer[`${i}`] + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }))), checkAnswers && (answer[`${i}`] == correctAnswer ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.success,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, \"Ok\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.fail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  }, \"\\u0179le\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Miejsce na link z rozwi\\u0105zaniem\"), /*#__PURE__*/React.createElement(TextareaAutosize, {\n    maxCols: \"15\",\n    minCols: \"5\",\n    value: description,\n    onChange: e => updateDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), checkAnswers && displayResult(), /*#__PURE__*/React.createElement(SendSolution, {\n    setChekAnswers: setChekAnswers,\n    checkAnswers: checkAnswers,\n    displayResult: displayResult,\n    sendSolution: sendSolution,\n    resolved: resolved,\n    error: error,\n    toUpdate: toUpdate,\n    result: result,\n    answers: answer,\n    description: description,\n    accountType: accountType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  })));\n};\n\nCloseTaskFromApi.propTypes = {};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType,\n  student: state.student.data._id\n});\n\nexport default connect(mapStateToProps, {\n  getCloseTask,\n  setTaskConfig,\n  updateDescription,\n  updateAnswer,\n  sendCloseTaskResolution\n})(CloseTaskFromApi);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/CloseTask/CloseTaskFromApi.js"],"names":["React","useEffect","useState","PropTypes","styles","BeatLoader","MathJax","AddTaskToClass","SendSolution","TextareaAutosize","ReviewTask","connect","getCloseTask","setTaskConfig","updateDescription","updateAnswer","sendCloseTaskResolution","CloseTaskFromApi","match","accountType","student","tasks","data","isFetching","errors","taskConfig","params","id","answer","description","descriptionRequired","resolved","toUpdate","_id","answers","taskStatus","setTaskStatus","checkAnswers","setChekAnswers","error","setError","prepareState","forEach","item","i","onChange","e","target","name","value","result","displayResult","Object","keys","length","sendSolution","root","content","points","map","correctAnswer","listElement","order","success","fail","propTypes","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./CloseTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport MathJax from \"../../MathJax\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport SendSolution from \"./SendSolution/SendSolution\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport ReviewTask from \"../ReviewTask/ReviewTask\";\nimport { connect } from \"react-redux\";\nimport { getCloseTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\nimport {\n  updateDescription,\n  updateAnswer,\n  sendCloseTaskResolution,\n} from \"../../../../redux/actions/resolveTask\";\n\nconst CloseTaskFromApi = ({\n  match,\n  getCloseTask,\n  accountType,\n  setTaskConfig,\n  updateDescription,\n  updateAnswer,\n  sendCloseTaskResolution,\n  student,\n  tasks: { data, isFetching, errors, taskConfig },\n}) => {\n  useEffect(() => {\n    getCloseTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n\n  const {\n    answer,\n    description,\n    descriptionRequired,\n    resolved,\n    toUpdate,\n    _id,\n  } = taskConfig;\n\n  const answers = {};\n  const [taskStatus, setTaskStatus] = useState(null);\n  const [checkAnswers, setChekAnswers] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const prepareState = () => {\n    data.data.forEach((item, i) => {\n      answers[`${i}`] = \"\";\n    });\n    setTaskStatus({ ...answers });\n  };\n\n  const onChange = (e) => {\n    setChekAnswers(false);\n    setTaskStatus({ ...taskStatus, [e.target.name]: e.target.value });\n    updateAnswer({ ...taskStatus, [e.target.name]: e.target.value });\n  };\n\n  let result = 0;\n\n  const displayResult = () => {\n    result = 0;\n    data.data.forEach(({ answer }, i) => answer == taskStatus[i] && result++);\n    return `Wynik: ${result}/${Object.keys(taskStatus).length}`;\n  };\n\n  const sendSolution = (result, toUpdate = false) => {\n    if (descriptionRequired && !description.length) setError(\"Wymagany opis!\");\n    else {\n      if (toUpdate)\n        sendCloseTaskResolution({ ...taskConfig, toUpdate, result });\n      else sendCloseTaskResolution({ ...taskConfig, toUpdate, result });\n    }\n  };\n\n  return (\n    <div className={styles.root}>\n      {isFetching ? (\n        <BeatLoader size={20} />\n      ) : (\n        <>\n          {taskStatus === null && prepareState()}\n          <h4>{data.name}</h4>\n          <p>{data.content}</p>\n          <p className={styles.points}>Punkty: {data.points}</p>\n          {taskStatus && (\n            <ul>\n              {data.data.map(({ content, answer: correctAnswer }, i) => (\n                <li className={styles.listElement}>\n                  <div className={styles.order}>\n                    {`${i + 1}). `}\n                    <MathJax content={\"`\" + content + \"`\"} />\n                  </div>\n                  Podaj odpowiedz:\n                  <div className={styles.item}>\n                    <input\n                      autocomplete=\"off\"\n                      name={`${i}`}\n                      value={answer[`${i}`]}\n                      onChange={(e) => onChange(e)}\n                    ></input>\n                    <div>\n                      <span>Twoja odpowiedz:</span>\n                      <div className={styles.result}>\n                        <MathJax content={\"`\" + answer[`${i}`] + \"`\"} />\n                      </div>\n                    </div>\n                    {checkAnswers &&\n                      (answer[`${i}`] == correctAnswer ? (\n                        <div className={styles.success}>Ok</div>\n                      ) : (\n                        <div className={styles.fail}>Źle</div>\n                      ))}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n          <div className={styles.description}>\n            <h4>Miejsce na link z rozwiązaniem</h4>\n            <TextareaAutosize\n              maxCols=\"15\"\n              minCols=\"5\"\n              value={description}\n              onChange={(e) => updateDescription(e.target.value)}\n            ></TextareaAutosize>\n          </div>\n          {checkAnswers && displayResult()}\n          <SendSolution\n            setChekAnswers={setChekAnswers}\n            checkAnswers={checkAnswers}\n            displayResult={displayResult}\n            sendSolution={sendSolution}\n            resolved={resolved}\n            error={error}\n            toUpdate={toUpdate}\n            result={result}\n            answers={answer}\n            description={description}\n            accountType={accountType}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nCloseTaskFromApi.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType,\n  student: state.student.data._id,\n});\n\nexport default connect(mapStateToProps, {\n  getCloseTask,\n  setTaskConfig,\n  updateDescription,\n  updateAnswer,\n  sendCloseTaskResolution,\n})(CloseTaskFromApi);\n"]},"metadata":{},"sourceType":"module"}