{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\OpenTask\\\\DisplayContent.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MathJax from \"../../MathJax\";\n\nconst DisplayContent = ({\n  content,\n  variables,\n  group\n}) => {\n  const [contentD, setContentD] = useState(content);\n  const [variablesD, setvariablesD] = useState(variables);\n  const [groupD, setgroupD] = useState(group);\n\n  const displayContent = (content, variables, group) => {\n    let domContent = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 22\n      }\n    }, content);\n    console.log(domContent.props.children);\n    let copy = domContent.props.children;\n\n    for (let i in variables) {\n      const currentVar = variables[i].variable;\n      const re = new RegExp(`{${currentVar}}`, \"g\");\n      const mathJaxsVar = \"\" + /*#__PURE__*/React.createElement(MathJax, {\n        content: group[currentVar],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 32\n        }\n      }) + \"\";\n      copy = copy.replace(re, mathJaxsVar);\n    }\n\n    domContent.innerHTML = copy;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, domContent);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, displayContent(contentD, variablesD, groupD));\n};\n\nDisplayContent.propTypes = {};\n\nconst mapStateToProps = state => ({});\n\nexport default DisplayContent;","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/OpenTask/DisplayContent.js"],"names":["React","useState","PropTypes","MathJax","DisplayContent","content","variables","group","contentD","setContentD","variablesD","setvariablesD","groupD","setgroupD","displayContent","domContent","console","log","props","children","copy","i","currentVar","variable","re","RegExp","mathJaxsVar","replace","innerHTML","propTypes","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,CAAD,KAAmC;AACxD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACI,OAAD,CAAxC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAACK,SAAD,CAA5C;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAACM,KAAD,CAApC;;AAEA,QAAMO,cAAc,GAAG,CAACT,OAAD,EAAUC,SAAV,EAAqBC,KAArB,KAA+B;AACpD,QAAIQ,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMV,OAAN,CAAjB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,KAAX,CAAiBC,QAA7B;AACA,QAAIC,IAAI,GAAGL,UAAU,CAACG,KAAX,CAAiBC,QAA5B;;AACA,SAAK,IAAIE,CAAT,IAAcf,SAAd,EAAyB;AACvB,YAAMgB,UAAU,GAAGhB,SAAS,CAACe,CAAD,CAAT,CAAaE,QAAhC;AACA,YAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAY,IAAGH,UAAW,GAA1B,EAA8B,GAA9B,CAAX;AACA,YAAMI,WAAW,GAAG,kBAAK,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAEnB,KAAK,CAACe,UAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL,GAA+C,EAAnE;AACAF,MAAAA,IAAI,GAAGA,IAAI,CAACO,OAAL,CAAaH,EAAb,EAAiBE,WAAjB,CAAP;AACD;;AACDX,IAAAA,UAAU,CAACa,SAAX,GAAuBR,IAAvB;AACA,wBAAO,0CAAGL,UAAH,CAAP;AACD,GAZD;;AAcA,sBAAO,0CAAGD,cAAc,CAACN,QAAD,EAAWE,UAAX,EAAuBE,MAAvB,CAAjB,CAAP;AACD,CApBD;;AAsBAR,cAAc,CAACyB,SAAf,GAA2B,EAA3B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY,EAAZ,CAAxB;;AAEA,eAAe3B,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MathJax from \"../../MathJax\";\n\nconst DisplayContent = ({ content, variables, group }) => {\n  const [contentD, setContentD] = useState(content);\n  const [variablesD, setvariablesD] = useState(variables);\n  const [groupD, setgroupD] = useState(group);\n\n  const displayContent = (content, variables, group) => {\n    let domContent = <div>{content}</div>;\n    console.log(domContent.props.children);\n    let copy = domContent.props.children;\n    for (let i in variables) {\n      const currentVar = variables[i].variable;\n      const re = new RegExp(`{${currentVar}}`, \"g\");\n      const mathJaxsVar = \"\" + <MathJax content={group[currentVar]} /> + \"\";\n      copy = copy.replace(re, mathJaxsVar);\n    }\n    domContent.innerHTML = copy;\n    return <>{domContent}</>;\n  };\n\n  return <>{displayContent(contentD, variablesD, groupD)}</>;\n};\n\nDisplayContent.propTypes = {};\n\nconst mapStateToProps = (state) => ({});\n\nexport default DisplayContent;\n"]},"metadata":{},"sourceType":"module"}