{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\OpenTask\\\\OpenTask.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport DisplayContent from \"./DisplayContent/DisplayContent\";\nimport DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\nimport MathJax from \"../../MathJax\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\nimport { useOnePrompt, updateDescription } from \"../../../../redux/actions/resolveTask\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  setTaskConfig,\n  description,\n  updateDescription,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig\n  }\n}) => {\n  const {\n    deadLine,\n    promptsAllowed,\n    usedPrompts,\n    descriptionRequired,\n    _id,\n    resolved,\n    group\n  } = taskConfig;\n  useEffect(() => {\n    getOpenTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = e => {\n    check(false);\n    setAnswer(e.target.value);\n  };\n\n  const countPoints = points => {\n    if (accountType == \"teacher\") return points;else {\n      if (!usedPrompts) return points;\n      if (usedPrompts === 1) return (points / 2).toPrecision(2);\n      if (usedPrompts === 2) return (points / 4).toPrecision(2);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, isFetching ? /*#__PURE__*/React.createElement(BeatLoader, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"p\", {\n    className: styles.points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Punkty: \", countPoints(data.points)), accountType == \"teacher\" && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Ilo\\u015B\\u0107 grup: \", data.data.groups.length)), /*#__PURE__*/React.createElement(DisplayContent, {\n    content: data.data.content,\n    variables: data.data.variables,\n    group: accountType == \"teacher\" ? data.data.groups[randomIndex] : group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), randomIndex === null ? setGroup() : \"\", /*#__PURE__*/React.createElement(DisplayPrompts, {\n    resolved: resolved,\n    promptsAllowed: promptsAllowed,\n    usedPrompts: usedPrompts,\n    action: useOnePrompt,\n    accountType: accountType,\n    taskId: _id,\n    model: data.data.model,\n    variables: [...data.data.variables, ...data.data.additionalVariables],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Miejsce na link z rozwi\\u0105zaniem\"), /*#__PURE__*/React.createElement(TextareaAutosize, {\n    maxCols: \"15\",\n    minCols: \"5\",\n    value: description,\n    onChange: e => updateDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Odpowied\\u017A:\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: answer,\n    onChange: e => addAnswer(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Twoja odpowied\\u017A:\"), /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + answer + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  })), checkAnswer ? correctAnswer == answer ? \"Brawo!\" : \"PomyÅ›l o tym jeszcze raz\" : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => check(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Dodaj odpowiedz!\"), !Object.keys(taskConfig).length > 0 && accountType == \"teacher\" && /*#__PURE__*/React.createElement(AddTaskToClass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  })));\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  description: state.tasks.taskConfig.description,\n  accountType: state.user.data.accountType\n});\n\nexport default connect(mapStateToProps, {\n  getOpenTask,\n  setTaskConfig,\n  updateDescription\n})(OpenTask);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/OpenTask/OpenTask.js"],"names":["React","useEffect","useState","PropTypes","styles","BeatLoader","DisplayContent","DisplayPrompts","MathJax","TextareaAutosize","AddTaskToClass","connect","getOpenTask","setTaskConfig","useOnePrompt","updateDescription","getRandomIntInclusive","min","max","Math","ceil","floor","random","OpenTask","match","accountType","description","tasks","data","isFetching","errors","taskConfig","deadLine","promptsAllowed","usedPrompts","descriptionRequired","_id","resolved","group","params","id","answer","setAnswer","correctAnswer","setCorrectAnswer","randomIndex","setRandomIndex","checkAnswer","check","setGroup","index","groups","length","addAnswer","e","target","value","countPoints","points","toPrecision","root","name","content","variables","model","additionalVariables","Object","keys","propTypes","mapStateToProps","state","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,cAAP,MAA2B,oDAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,iCAA3C;AACA,SACEC,YADF,EAEEC,iBAFF,QAGO,uCAHP;;AAKA,MAAMC,qBAAqB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1CD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD,CAJD;;AAMA,MAAMM,QAAQ,GAAG,CAAC;AAChBC,EAAAA,KADgB;AAEhBZ,EAAAA,WAFgB;AAGhBa,EAAAA,WAHgB;AAIhBZ,EAAAA,aAJgB;AAKhBa,EAAAA,WALgB;AAMhBX,EAAAA,iBANgB;AAOhBY,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B;AAPS,CAAD,KAQX;AACJ,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,mBAJI;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA;AAPI,MAQFP,UARJ;AASA9B,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAACY,KAAK,CAACe,MAAN,CAAaC,EAAd,CAAX;AACA,WAAO,MAAM3B,aAAa,CAAC,EAAD,CAA1B;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAM,CAAC4B,MAAD,EAASC,SAAT,IAAsBxC,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACyC,aAAD,EAAgBC,gBAAhB,IAAoC1C,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAC2C,WAAD,EAAcC,cAAd,IAAgC5C,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC6C,WAAD,EAAcC,KAAd,IAAuB9C,QAAQ,CAAC,KAAD,CAArC;;AAEA,QAAM+C,QAAQ,GAAG,MAAM;AACrB,UAAMC,KAAK,GAAGlC,qBAAqB,CAAC,CAAD,EAAIY,IAAI,CAACA,IAAL,CAAUuB,MAAV,CAAiBC,MAAjB,GAA0B,CAA9B,CAAnC;AACAN,IAAAA,cAAc,CAACI,KAAD,CAAd;AACAN,IAAAA,gBAAgB,CAAChB,IAAI,CAACA,IAAL,CAAUuB,MAAV,CAAiBD,KAAjB,EAAwBT,MAAzB,CAAhB;AACD,GAJD;;AAMA,QAAMY,SAAS,GAAIC,CAAD,IAAO;AACvBN,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAN,IAAAA,SAAS,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,QAAIjC,WAAW,IAAI,SAAnB,EAA8B,OAAOiC,MAAP,CAA9B,KACK;AACH,UAAI,CAACxB,WAAL,EAAkB,OAAOwB,MAAP;AAClB,UAAIxB,WAAW,KAAK,CAApB,EAAuB,OAAO,CAACwB,MAAM,GAAG,CAAV,EAAaC,WAAb,CAAyB,CAAzB,CAAP;AACvB,UAAIzB,WAAW,KAAK,CAApB,EAAuB,OAAO,CAACwB,MAAM,GAAG,CAAV,EAAaC,WAAb,CAAyB,CAAzB,CAAP;AACxB;AACF,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAEvD,MAAM,CAACwD,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG/B,UAAU,gBACT,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,gBAGT,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACiC,IAAV,CADF,eAEE;AAAG,IAAA,SAAS,EAAEzD,MAAM,CAACsD,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAeD,WAAW,CAAC7B,IAAI,CAAC8B,MAAN,CAA1B,CADF,EAEGjC,WAAW,IAAI,SAAf,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAmBG,IAAI,CAACA,IAAL,CAAUuB,MAAV,CAAiBC,MAApC,CAHJ,CAFF,eAQE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAExB,IAAI,CAACA,IAAL,CAAUkC,OADrB;AAEE,IAAA,SAAS,EAAElC,IAAI,CAACA,IAAL,CAAUmC,SAFvB;AAGE,IAAA,KAAK,EACHtC,WAAW,IAAI,SAAf,GAA2BG,IAAI,CAACA,IAAL,CAAUuB,MAAV,CAAiBN,WAAjB,CAA3B,GAA2DP,KAJ/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAeGO,WAAW,KAAK,IAAhB,GAAuBI,QAAQ,EAA/B,GAAoC,EAfvC,eAgBE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAEZ,QADZ;AAEE,IAAA,cAAc,EAAEJ,cAFlB;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,MAAM,EAAEpB,YAJV;AAKE,IAAA,WAAW,EAAEW,WALf;AAME,IAAA,MAAM,EAAEW,GANV;AAOE,IAAA,KAAK,EAAER,IAAI,CAACA,IAAL,CAAUoC,KAPnB;AAQE,IAAA,SAAS,EAAE,CACT,GAAGpC,IAAI,CAACA,IAAL,CAAUmC,SADJ,EAET,GAAGnC,IAAI,CAACA,IAAL,CAAUqC,mBAFJ,CARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CA7BF,eA8BE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAC,IADV;AAEE,IAAA,OAAO,EAAC,GAFV;AAGE,IAAA,KAAK,EAAEvC,WAHT;AAIE,IAAA,QAAQ,EAAG4B,CAAD,IAAOvC,iBAAiB,CAACuC,CAAC,CAACC,MAAF,CAASC,KAAV,CAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,eAoCE;AAAK,IAAA,SAAS,EAAEpD,MAAM,CAACqC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AAAO,IAAA,KAAK,EAAEA,MAAd;AAAsB,IAAA,QAAQ,EAAGa,CAAD,IAAOD,SAAS,CAACC,CAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CApCF,eAwCE;AAAK,IAAA,SAAS,EAAElD,MAAM,CAACqC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAE,MAAMA,MAAN,GAAe,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAxCF,EA4CGM,WAAW,GACVJ,aAAa,IAAIF,MAAjB,GACE,QADF,GAGE,0BAJQ,gBAOV;AAAQ,IAAA,OAAO,EAAE,MAAMO,KAAK,CAAC,IAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAnDJ,EAqDG,CAACkB,MAAM,CAACC,IAAP,CAAYpC,UAAZ,EAAwBqB,MAAzB,GAAkC,CAAlC,IAAuC3B,WAAW,IAAI,SAAtD,iBACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtDJ,CAJJ,CADF;AAiED,CAjHD;;AAmHAF,QAAQ,CAAC6C,SAAT,GAAqB,EAArB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClC3C,EAAAA,KAAK,EAAE2C,KAAK,CAAC3C,KADqB;AAElCD,EAAAA,WAAW,EAAE4C,KAAK,CAAC3C,KAAN,CAAYI,UAAZ,CAAuBL,WAFF;AAGlCD,EAAAA,WAAW,EAAE6C,KAAK,CAACC,IAAN,CAAW3C,IAAX,CAAgBH;AAHK,CAAZ,CAAxB;;AAMA,eAAed,OAAO,CAAC0D,eAAD,EAAkB;AACtCzD,EAAAA,WADsC;AAEtCC,EAAAA,aAFsC;AAGtCE,EAAAA;AAHsC,CAAlB,CAAP,CAIZQ,QAJY,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport DisplayContent from \"./DisplayContent/DisplayContent\";\nimport DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\nimport MathJax from \"../../MathJax\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\nimport {\n  useOnePrompt,\n  updateDescription,\n} from \"../../../../redux/actions/resolveTask\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  setTaskConfig,\n  description,\n  updateDescription,\n  tasks: { data, isFetching, errors, taskConfig },\n}) => {\n  const {\n    deadLine,\n    promptsAllowed,\n    usedPrompts,\n    descriptionRequired,\n    _id,\n    resolved,\n    group,\n  } = taskConfig;\n  useEffect(() => {\n    getOpenTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = (e) => {\n    check(false);\n    setAnswer(e.target.value);\n  };\n\n  const countPoints = (points) => {\n    if (accountType == \"teacher\") return points;\n    else {\n      if (!usedPrompts) return points;\n      if (usedPrompts === 1) return (points / 2).toPrecision(2);\n      if (usedPrompts === 2) return (points / 4).toPrecision(2);\n    }\n  };\n\n  return (\n    <div className={styles.root}>\n      {isFetching ? (\n        <BeatLoader size={20} />\n      ) : (\n        <>\n          <h4>{data.name}</h4>\n          <p className={styles.points}>\n            <span>Punkty: {countPoints(data.points)}</span>\n            {accountType == \"teacher\" && (\n              <span>IloÅ›Ä‡ grup: {data.data.groups.length}</span>\n            )}\n          </p>\n          <DisplayContent\n            content={data.data.content}\n            variables={data.data.variables}\n            group={\n              accountType == \"teacher\" ? data.data.groups[randomIndex] : group\n            }\n          />\n          {randomIndex === null ? setGroup() : \"\"}\n          <DisplayPrompts\n            resolved={resolved}\n            promptsAllowed={promptsAllowed}\n            usedPrompts={usedPrompts}\n            action={useOnePrompt}\n            accountType={accountType}\n            taskId={_id}\n            model={data.data.model}\n            variables={[\n              ...data.data.variables,\n              ...data.data.additionalVariables,\n            ]}\n          />\n          <h4>Miejsce na link z rozwiÄ…zaniem</h4>\n          <TextareaAutosize\n            maxCols=\"15\"\n            minCols=\"5\"\n            value={description}\n            onChange={(e) => updateDescription(e.target.value)}\n          ></TextareaAutosize>\n          <div className={styles.answer}>\n            <h4>OdpowiedÅº:</h4>\n            <input value={answer} onChange={(e) => addAnswer(e)}></input>\n          </div>\n          <div className={styles.answer}>\n            <h4>Twoja odpowiedÅº:</h4>\n            <MathJax content={\"`\" + answer + \"`\"} />\n          </div>\n          {checkAnswer ? (\n            correctAnswer == answer ? (\n              \"Brawo!\"\n            ) : (\n              \"PomyÅ›l o tym jeszcze raz\"\n            )\n          ) : (\n            <button onClick={() => check(true)}>Dodaj odpowiedz!</button>\n          )}\n          {!Object.keys(taskConfig).length > 0 && accountType == \"teacher\" && (\n            <AddTaskToClass />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasks,\n  description: state.tasks.taskConfig.description,\n  accountType: state.user.data.accountType,\n});\n\nexport default connect(mapStateToProps, {\n  getOpenTask,\n  setTaskConfig,\n  updateDescription,\n})(OpenTask);\n"]},"metadata":{},"sourceType":"module"}