{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\OpenTask\\\\OpenTask.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport DisplayContent from \"./DisplayContent/DisplayContent\";\nimport DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\nimport MathJax from \"../../MathJax\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  setTaskConfig,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig\n  }\n}) => {\n  const {\n    deadLine,\n    promptsAllowed,\n    usedPrompts,\n    descriptionRequired\n  } = taskConfig;\n  useEffect(() => {\n    getOpenTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n  const [answerDescription, setAnswerDescription] = useState(\"\");\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = e => {\n    check(false);\n    setAnswer(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, isFetching ? /*#__PURE__*/React.createElement(BeatLoader, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"p\", {\n    className: styles.points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"Punkty: \", data.points), /*#__PURE__*/React.createElement(DisplayContent, {\n    content: data.data.content,\n    variables: data.data.variables,\n    group: data.data.groups[randomIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), randomIndex === null ? setGroup() : \"\", (accountType == \"teacher\" || promptsAllowed) && /*#__PURE__*/React.createElement(DisplayPrompts, {\n    usedPrompts: accountType == \"teacher\" ? 0 : usedPrompts,\n    model: data.data.model,\n    variables: [...data.data.variables, ...data.data.additionalVariables],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Miejsce na link z rozwi\\u0105zaniem\"), /*#__PURE__*/React.createElement(TextareaAutosize, {\n    maxCols: \"15\",\n    minCols: \"5\",\n    value: answerDescription,\n    onChange: e => setAnswerDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"Odpowied\\u017A:\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: answer,\n    onChange: e => addAnswer(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Twoja odpowied\\u017A:\"), /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + answer + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  })), checkAnswer ? correctAnswer == answer ? \"Brawo!\" : \"PomyÅ›l o tym jeszcze raz\" : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => check(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Dodaj odpowiedz!\"), !Object.keys(taskConfig).length > 0 && accountType == \"teacher\" && /*#__PURE__*/React.createElement(AddTaskToClass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })));\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType\n});\n\nexport default connect(mapStateToProps, {\n  getOpenTask,\n  setTaskConfig\n})(OpenTask);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/OpenTask/OpenTask.js"],"names":["React","useEffect","useState","PropTypes","styles","BeatLoader","DisplayContent","DisplayPrompts","MathJax","TextareaAutosize","AddTaskToClass","connect","getOpenTask","setTaskConfig","getRandomIntInclusive","min","max","Math","ceil","floor","random","OpenTask","match","accountType","tasks","data","isFetching","errors","taskConfig","deadLine","promptsAllowed","usedPrompts","descriptionRequired","params","id","answer","setAnswer","correctAnswer","setCorrectAnswer","randomIndex","setRandomIndex","checkAnswer","check","answerDescription","setAnswerDescription","setGroup","index","groups","length","addAnswer","e","target","value","root","name","points","content","variables","model","additionalVariables","Object","keys","propTypes","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport DisplayContent from \"./DisplayContent/DisplayContent\";\nimport DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\nimport MathJax from \"../../MathJax\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask, setTaskConfig } from \"../../../../redux/actions/tasks\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  setTaskConfig,\n  tasks: { data, isFetching, errors, taskConfig },\n}) => {\n  const {\n    deadLine,\n    promptsAllowed,\n    usedPrompts,\n    descriptionRequired,\n  } = taskConfig;\n  useEffect(() => {\n    getOpenTask(match.params.id);\n    return () => setTaskConfig({});\n  }, []);\n\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n  const [answerDescription, setAnswerDescription] = useState(\"\");\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = (e) => {\n    check(false);\n    setAnswer(e.target.value);\n  };\n\n  return (\n    <div className={styles.root}>\n      {isFetching ? (\n        <BeatLoader size={20} />\n      ) : (\n        <>\n          <h4>{data.name}</h4>\n          <p className={styles.points}>Punkty: {data.points}</p>\n\n          <DisplayContent\n            content={data.data.content}\n            variables={data.data.variables}\n            group={data.data.groups[randomIndex]}\n          />\n          {randomIndex === null ? setGroup() : \"\"}\n          {(accountType == \"teacher\" || promptsAllowed) && (\n            <DisplayPrompts\n              usedPrompts={accountType == \"teacher\" ? 0 : usedPrompts}\n              model={data.data.model}\n              variables={[\n                ...data.data.variables,\n                ...data.data.additionalVariables,\n              ]}\n            />\n          )}\n          <h4>Miejsce na link z rozwiÄ…zaniem</h4>\n          <TextareaAutosize\n            maxCols=\"15\"\n            minCols=\"5\"\n            value={answerDescription}\n            onChange={(e) => setAnswerDescription(e.target.value)}\n          ></TextareaAutosize>\n          <div className={styles.answer}>\n            <h4>OdpowiedÅº:</h4>\n            <input value={answer} onChange={(e) => addAnswer(e)}></input>\n          </div>\n          <div className={styles.answer}>\n            <h4>Twoja odpowiedÅº:</h4>\n            <MathJax content={\"`\" + answer + \"`\"} />\n          </div>\n          {checkAnswer ? (\n            correctAnswer == answer ? (\n              \"Brawo!\"\n            ) : (\n              \"PomyÅ›l o tym jeszcze raz\"\n            )\n          ) : (\n            <button onClick={() => check(true)}>Dodaj odpowiedz!</button>\n          )}\n          {!Object.keys(taskConfig).length > 0 && accountType == \"teacher\" && (\n            <AddTaskToClass />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType,\n});\n\nexport default connect(mapStateToProps, { getOpenTask, setTaskConfig })(\n  OpenTask\n);\n"]},"metadata":{},"sourceType":"module"}