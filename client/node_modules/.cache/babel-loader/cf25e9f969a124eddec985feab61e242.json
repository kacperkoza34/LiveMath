{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\OpenTask\\\\OpenTask.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\"; //import DisplayContent from \"./DisplayContent/DisplayContent\";\n//import DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\n\nimport MathJax from \"../../MathJax\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask } from \"../../../../redux/actions/tasks\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig: {\n      deadLine,\n      promptsAllowed,\n      usedPrompts,\n      descriptionRequired\n    }\n  }\n}) => {\n  useEffect(() => {\n    getOpenTask(match.params.id);\n  }, []);\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n  const [answerDescription, setAnswerDescription] = useState(\"\");\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = e => {\n    check(false);\n\n    if (descriptionRequired && !answerDescription.length) {\n      setAnswer(\"Wymagany opis zadania!\");\n    } else {\n      setAnswer(e.target.value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, isFetching ? /*#__PURE__*/React.createElement(BeatLoader, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, data.name), /*#__PURE__*/React.createElement(DisplayContent, {\n    content: data.data.content,\n    variables: data.data.variables,\n    group: data.data.groups[randomIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), randomIndex === null ? setGroup() : \"\", (accountType == \"teacher\" || promptsAllowed) && /*#__PURE__*/React.createElement(DisplayPrompts, {\n    usedPrompts: accountType == \"teacher\" ? 0 : usedPrompts,\n    model: data.data.model,\n    variables: [...data.data.variables, ...data.data.additionalVariables],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: answerDescription,\n    onChange: e => setAnswerDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + answerDescription + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: answer,\n    onChange: e => addAnswer(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MathJax, {\n    content: \"`\" + answer + \"`\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), checkAnswer ? correctAnswer == answer ? \"Brawo!\" : \"PomyÅ›l o tym jeszcze raz\" : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => check(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Dodaj odpowiedz!\"), accountType == \"teacher\" && /*#__PURE__*/React.createElement(AddTaskToClass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 40\n    }\n  })));\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType\n});\n\nexport default connect(mapStateToProps, {\n  getOpenTask\n})(OpenTask);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/OpenTask/OpenTask.js"],"names":["React","useEffect","useState","PropTypes","styles","BeatLoader","MathJax","AddTaskToClass","connect","getOpenTask","getRandomIntInclusive","min","max","Math","ceil","floor","random","OpenTask","match","accountType","tasks","data","isFetching","errors","taskConfig","deadLine","promptsAllowed","usedPrompts","descriptionRequired","params","id","answer","setAnswer","correctAnswer","setCorrectAnswer","randomIndex","setRandomIndex","checkAnswer","check","answerDescription","setAnswerDescription","setGroup","index","groups","length","addAnswer","e","target","value","root","name","content","variables","model","additionalVariables","propTypes","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./OpenTask.module.scss\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\n//import DisplayContent from \"./DisplayContent/DisplayContent\";\n//import DisplayPrompts from \"./DisplayPrompts/DisplayPrompts\";\nimport MathJax from \"../../MathJax\";\nimport AddTaskToClass from \"../../AddTaskToClass/AddTaskToClass/AddTaskToClass\";\nimport { connect } from \"react-redux\";\nimport { getOpenTask } from \"../../../../redux/actions/tasks\";\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig: { deadLine, promptsAllowed, usedPrompts, descriptionRequired },\n  },\n}) => {\n  useEffect(() => {\n    getOpenTask(match.params.id);\n  }, []);\n\n  const [answer, setAnswer] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n  const [answerDescription, setAnswerDescription] = useState(\"\");\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = (e) => {\n    check(false);\n    if (descriptionRequired && !answerDescription.length) {\n      setAnswer(\"Wymagany opis zadania!\");\n    } else {\n      setAnswer(e.target.value);\n    }\n  };\n  return (\n    <div className={styles.root}>\n      {isFetching ? (\n        <BeatLoader size={20} />\n      ) : (\n        <>\n          <h4>{data.name}</h4>\n          <DisplayContent\n            content={data.data.content}\n            variables={data.data.variables}\n            group={data.data.groups[randomIndex]}\n          />\n          {randomIndex === null ? setGroup() : \"\"}\n          {(accountType == \"teacher\" || promptsAllowed) && (\n            <DisplayPrompts\n              usedPrompts={accountType == \"teacher\" ? 0 : usedPrompts}\n              model={data.data.model}\n              variables={[\n                ...data.data.variables,\n                ...data.data.additionalVariables,\n              ]}\n            />\n          )}\n          <textarea\n            value={answerDescription}\n            onChange={(e) => setAnswerDescription(e.target.value)}\n          ></textarea>\n          <MathJax content={\"`\" + answerDescription + \"`\"} />\n          <input value={answer} onChange={(e) => addAnswer(e)}></input>\n          <MathJax content={\"`\" + answer + \"`\"} />\n          {checkAnswer ? (\n            correctAnswer == answer ? (\n              \"Brawo!\"\n            ) : (\n              \"PomyÅ›l o tym jeszcze raz\"\n            )\n          ) : (\n            <button onClick={() => check(true)}>Dodaj odpowiedz!</button>\n          )}\n          {accountType == \"teacher\" && <AddTaskToClass />}\n        </>\n      )}\n    </div>\n  );\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType,\n});\n\nexport default connect(mapStateToProps, { getOpenTask })(OpenTask);\n"]},"metadata":{},"sourceType":"module"}