{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\profile\\\\StudentProfile\\\\TasksList.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TasksList.module.scss\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { clearTasks, setTaskConfig } from \"../../../redux/actions/tasks\";\n\nconst TasksList = ({\n  tasks,\n  clearTasks,\n  setTaskConfig\n}) => {\n  const compare = (a, b) => {\n    return Date.parse(b.date) - Date.parse(a.date);\n  };\n\n  const sortedTasks = [...tasks].sort(compare);\n\n  const displayStatus = (deadLine, resolved) => {\n    console.log(Date.now(), resolved);\n    if (Date.parse(deadLine) < Date.now() && !resolved) return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.failed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }\n    }, \"Niewykonane\");\n    if (Date.parse(deadLine) > Date.now() && !resolved) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }\n    }, \"Do wykonania\");\n    if (resolved) return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.success,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 26\n      }\n    }, \"Rozwi\\u0105zane\");\n  };\n\n  const displayOpenTask = ({\n    task,\n    deadLine,\n    promptsAllowed,\n    descriptionRequired,\n    usedPrompts,\n    resolved,\n    _id\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.openTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: styles.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    onClick: () => {\n      clearTasks();\n      setTaskConfig({\n        description: \"\",\n        deadLine,\n        resolved,\n        promptsAllowed,\n        descriptionRequired,\n        usedPrompts,\n        _id\n      });\n    },\n    to: `/display/openTask/${task._id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, task.name)), \" \", /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Termin: \", \" \", /*#__PURE__*/React.createElement(Moment, {\n    format: \"YYYY/MM/DD HH:mm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 26\n    }\n  }, deadLine))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, promptsAllowed ? `Wykorzystane podpowiedzi: ${usedPrompts}` : \"Podpowiedzi niedostÄ™pne\"), \" \", /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Opis: \", descriptionRequired ? \"wymagany\" : \"niewymagany\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Status: \", displayStatus(deadLine, resolved)), \" \")));\n\n  const displayCloseTask = ({\n    task,\n    deadLine,\n    resolved\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.closeTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: styles.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Link, {\n    onClick: () => {\n      clearTasks();\n      setTaskConfig({\n        deadLine,\n        resolved\n      });\n    },\n    to: `/display/closeTask/${task._id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, task.name)), \" \", /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Termin: \", \" \", /*#__PURE__*/React.createElement(Moment, {\n    format: \"YYYY/MM/DD HH:mm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 26\n    }\n  }, deadLine))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Status: \", displayStatus(deadLine, resolved)), \" \")));\n\n  const displayBooleanTask = ({\n    task,\n    deadLine,\n    resolved\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.booleanTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: styles.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Link, {\n    onClick: () => {\n      clearTasks();\n      setTaskConfig({\n        deadLine,\n        resolved\n      });\n    },\n    to: `/display/booleanTask/${task._id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, task.name)), \" \", /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Termin: \", \" \", /*#__PURE__*/React.createElement(Moment, {\n    format: \"YYYY/MM/DD HH:mm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 26\n    }\n  }, deadLine))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Status: \", displayStatus(deadLine, resolved)), \" \")));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, sortedTasks.map(item => {\n    if (item.taskType == \"taskClose\") return displayCloseTask(item);\n    if (item.taskType == \"taskOpen\") return displayOpenTask(item);\n    if (item.taskType == \"taskBoolean\") return displayBooleanTask(item);\n  }));\n};\n\nTasksList.propTypes = {\n  tasks: PropTypes.array.isRequired\n};\nexport default connect(null, {\n  clearTasks,\n  setTaskConfig\n})(TasksList);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/profile/StudentProfile/TasksList.js"],"names":["React","PropTypes","styles","Moment","Link","connect","clearTasks","setTaskConfig","TasksList","tasks","compare","a","b","Date","parse","date","sortedTasks","sort","displayStatus","deadLine","resolved","console","log","now","failed","success","displayOpenTask","task","promptsAllowed","descriptionRequired","usedPrompts","_id","openTask","name","description","displayCloseTask","closeTask","displayBooleanTask","booleanTask","root","map","item","taskType","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TasksList.module.scss\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { clearTasks, setTaskConfig } from \"../../../redux/actions/tasks\";\n\nconst TasksList = ({ tasks, clearTasks, setTaskConfig }) => {\n  const compare = (a, b) => {\n    return Date.parse(b.date) - Date.parse(a.date);\n  };\n  const sortedTasks = [...tasks].sort(compare);\n\n  const displayStatus = (deadLine, resolved) => {\n    console.log(Date.now(), resolved);\n    if (Date.parse(deadLine) < Date.now() && !resolved)\n      return <div className={styles.failed}>Niewykonane</div>;\n    if (Date.parse(deadLine) > Date.now() && !resolved)\n      return <div>Do wykonania</div>;\n    if (resolved) return <div className={styles.success}>RozwiÄ…zane</div>;\n  };\n\n  const displayOpenTask = ({\n    task,\n    deadLine,\n    promptsAllowed,\n    descriptionRequired,\n    usedPrompts,\n    resolved,\n    _id,\n  }) => (\n    <div className={styles.openTask}>\n      <table>\n        <tr>\n          <td className={styles.name}>\n            <Link\n              onClick={() => {\n                clearTasks();\n                setTaskConfig({\n                  description: \"\",\n                  deadLine,\n                  resolved,\n                  promptsAllowed,\n                  descriptionRequired,\n                  usedPrompts,\n                  _id,\n                });\n              }}\n              to={`/display/openTask/${task._id}`}\n            >\n              {task.name}\n            </Link>\n          </td>{\" \"}\n          <td>\n            {\"Termin: \"} <Moment format=\"YYYY/MM/DD HH:mm\">{deadLine}</Moment>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            {promptsAllowed\n              ? `Wykorzystane podpowiedzi: ${usedPrompts}`\n              : \"Podpowiedzi niedostÄ™pne\"}\n          </td>{\" \"}\n          <td>Opis: {descriptionRequired ? \"wymagany\" : \"niewymagany\"}</td>\n        </tr>\n        <tr>\n          <td>Status: {displayStatus(deadLine, resolved)}</td>{\" \"}\n        </tr>\n      </table>\n    </div>\n  );\n\n  const displayCloseTask = ({ task, deadLine, resolved }) => (\n    <div className={styles.closeTask}>\n      <table>\n        <tr>\n          <td className={styles.name}>\n            {\" \"}\n            <Link\n              onClick={() => {\n                clearTasks();\n                setTaskConfig({ deadLine, resolved });\n              }}\n              to={`/display/closeTask/${task._id}`}\n            >\n              {task.name}\n            </Link>\n          </td>{\" \"}\n          <td>\n            {\"Termin: \"} <Moment format=\"YYYY/MM/DD HH:mm\">{deadLine}</Moment>\n          </td>\n        </tr>\n        <tr>\n          <td>Status: {displayStatus(deadLine, resolved)}</td>{\" \"}\n        </tr>\n      </table>\n    </div>\n  );\n\n  const displayBooleanTask = ({ task, deadLine, resolved }) => (\n    <div className={styles.booleanTask}>\n      <table>\n        <tr>\n          <td className={styles.name}>\n            {\" \"}\n            <Link\n              onClick={() => {\n                clearTasks();\n                setTaskConfig({ deadLine, resolved });\n              }}\n              to={`/display/booleanTask/${task._id}`}\n            >\n              {task.name}\n            </Link>\n          </td>{\" \"}\n          <td>\n            {\"Termin: \"} <Moment format=\"YYYY/MM/DD HH:mm\">{deadLine}</Moment>\n          </td>\n        </tr>\n        <tr>\n          <td>Status: {displayStatus(deadLine, resolved)}</td>{\" \"}\n        </tr>\n      </table>\n    </div>\n  );\n\n  return (\n    <div className={styles.root}>\n      {sortedTasks.map((item) => {\n        if (item.taskType == \"taskClose\") return displayCloseTask(item);\n        if (item.taskType == \"taskOpen\") return displayOpenTask(item);\n        if (item.taskType == \"taskBoolean\") return displayBooleanTask(item);\n      })}\n    </div>\n  );\n};\n\nTasksList.propTypes = {\n  tasks: PropTypes.array.isRequired,\n};\n\nexport default connect(null, { clearTasks, setTaskConfig })(TasksList);\n"]},"metadata":{},"sourceType":"module"}