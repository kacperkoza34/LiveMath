{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const loadUser = accountType => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  console.log(accountType);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.get('/api/auth', {\n      accountType\n    }, config);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password,\n  params\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log(params);\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    let res;\n\n    if (params.class) {\n      res = await axios.post(`/api/users/student/${params.teacher}/${params.class}`, body, config);\n    } else {\n      res = await axios.post(`/api/users/teacher/${params.teacher}`, body, config);\n    }\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const {\n      errors,\n      msg\n    } = err.response.data;\n    console.log(err.response.data);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    if (msg) dispatch(setAlert(msg, 'danger'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = ({\n  email,\n  password,\n  accountType\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password,\n    accountType\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: { ...res.data,\n        accountType\n      }\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const {\n      errors,\n      msg\n    } = err.response.data;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    if (msg) dispatch(setAlert(msg, 'danger'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemo/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","accountType","dispatch","localStorage","token","console","log","config","headers","res","get","type","payload","data","err","register","name","email","password","params","body","JSON","stringify","class","post","teacher","errors","msg","response","forEach","error","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_PROFILE\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n// Load user\r\n\r\nexport const loadUser = (accountType) => async dispatch => {\r\n  if(localStorage.token){\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  console.log(accountType);\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  try {\r\n    const res = await axios.get('/api/auth',{accountType}, config);\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err){\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    })\r\n  }\r\n};\r\n\r\n// Register user\r\n\r\nexport const register = ({ name, email, password, params}) => async dispatch =>{\r\n  const config = {\r\n    headers: {\r\n      'Content-Type' : 'application/json'\r\n    }\r\n  }\r\n  console.log(params)\r\n  const body = JSON.stringify({ name, email, password});\r\n  try {\r\n    let res;\r\n    if(params.class){\r\n      res = await axios.post(`/api/users/student/${params.teacher}/${params.class}`, body, config);\r\n    }\r\n    else {\r\n      res = await axios.post(`/api/users/teacher/${params.teacher}`, body, config);\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const {errors, msg} = err.response.data;\r\n    console.log(err.response.data);\r\n    if(errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    if(msg)dispatch(setAlert(msg, 'danger'));\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    })\r\n  }\r\n};\r\n\r\n// Login user\r\n\r\nexport const login = ({email, password, accountType}) => async dispatch =>{\r\n  const config = {\r\n    headers: {\r\n      'Content-Type' : 'application/json'\r\n    }\r\n  }\r\n  const body = JSON.stringify({email, password, accountType});\r\n  try {\r\n    const res = await axios.post('/api/auth', body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: {...res.data, accountType}\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const {errors, msg} = err.response.data;\r\n    if(errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    if(msg)dispatch(setAlert(msg, 'danger'));\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    })\r\n  }\r\n};\r\n\r\n// LOGOUT\r\n\r\nexport const logout = () => dispatch => {\r\n  dispatch({type: CLEAR_PROFILE});\r\n  dispatch({type: LOGOUT});\r\n}\r\n"]},"metadata":{},"sourceType":"module"}