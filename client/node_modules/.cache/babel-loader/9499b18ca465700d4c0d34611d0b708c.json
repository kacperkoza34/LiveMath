{"ast":null,"code":"import { ADD_TASK_CONTENT, ADD_TASK_VARIABELS, ADD_TASK_MODEL, ADD_VAR_DESCRIPTION, ADD_GROUP, ADD_ADDITIONAL_VARIABLE, REMOVE_ADDITIONAL_VARIABLE, ADD_CLASS, ADD_SECTION, ADD_NAME, NEW_TASK_ERROR, CLEAR_NEW_TASK, DELETE_GROUP, UPDATE_POINTS } from \"../actions/newTask\";\nexport default function reducer(statePart = [], action = {}) {\n  switch (action.type) {\n    case ADD_TASK_CONTENT:\n      return { ...statePart,\n        data: { ...statePart.data,\n          content: action.payload,\n          model: \"\",\n          groups: [],\n          variables: [],\n          additionalVariables: []\n        }\n      };\n\n    case ADD_NAME:\n      return { ...statePart,\n        data: { ...statePart.data,\n          name: action.payload\n        }\n      };\n\n    case ADD_TASK_VARIABELS:\n      return { ...statePart,\n        data: { ...statePart.data,\n          variables: action.payload,\n          model: \"\",\n          additionalVariables: [],\n          groups: []\n        }\n      };\n\n    case ADD_TASK_MODEL:\n      return { ...statePart,\n        data: { ...statePart.data,\n          model: action.payload\n        }\n      };\n\n    case ADD_VAR_DESCRIPTION:\n      return { ...statePart,\n        data: { ...statePart.data,\n          variables: statePart.data.variables.map(item => {\n            if (item.variable === action.payload.variable) return { ...item,\n              description: action.payload.value\n            };else return item;\n          })\n        }\n      };\n\n    case ADD_ADDITIONAL_VARIABLE:\n      return { ...statePart,\n        data: { ...statePart.data,\n          groups: [],\n          additionalVariables: [...statePart.data.additionalVariables, action.payload]\n        }\n      };\n\n    case REMOVE_ADDITIONAL_VARIABLE:\n      return { ...statePart,\n        data: { ...statePart.data,\n          additionalVariables: statePart.data.additionalVariables.filter(({\n            variable\n          }) => variable != action.payload)\n        }\n      };\n\n    case ADD_GROUP:\n      return { ...statePart,\n        data: { ...statePart.data,\n          groups: [...statePart.data.groups, action.payload]\n        }\n      };\n\n    case DELETE_GROUP:\n      return { ...statePart,\n        data: { ...statePart.data,\n          groups: statePart.data.groups.filter(({\n            id\n          }) => id != action.payload)\n        }\n      };\n\n    case ADD_CLASS:\n      return { ...statePart,\n        data: { ...statePart.data,\n          class: action.payload\n        }\n      };\n\n    case ADD_SECTION:\n      return { ...statePart,\n        data: { ...statePart.data,\n          section: action.payload\n        }\n      };\n\n    case UPDATE_POINTS:\n      return { ...statePart,\n        data: { ...statePart.data,\n          points: action.payload\n        }\n      };\n\n    case CLEAR_NEW_TASK:\n      return { ...statePart,\n        data: {\n          content: \"\",\n          name: \"\",\n          variables: [],\n          additionalVariables: [],\n          model: \"\",\n          groups: [],\n          class: \"\",\n          section: \"\"\n        },\n        success: action.payload\n      };\n\n    case NEW_TASK_ERROR:\n      return { ...statePart,\n        errors: action.payload\n      };\n\n    default:\n      return statePart;\n  }\n}","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/redux/reducers/newTasksReducer.js"],"names":["ADD_TASK_CONTENT","ADD_TASK_VARIABELS","ADD_TASK_MODEL","ADD_VAR_DESCRIPTION","ADD_GROUP","ADD_ADDITIONAL_VARIABLE","REMOVE_ADDITIONAL_VARIABLE","ADD_CLASS","ADD_SECTION","ADD_NAME","NEW_TASK_ERROR","CLEAR_NEW_TASK","DELETE_GROUP","UPDATE_POINTS","reducer","statePart","action","type","data","content","payload","model","groups","variables","additionalVariables","name","map","item","variable","description","value","filter","id","class","section","points","success","errors"],"mappings":"AAAA,SACEA,gBADF,EAEEC,kBAFF,EAGEC,cAHF,EAIEC,mBAJF,EAKEC,SALF,EAMEC,uBANF,EAOEC,0BAPF,EAQEC,SARF,EASEC,WATF,EAUEC,QAVF,EAWEC,cAXF,EAYEC,cAZF,EAaEC,YAbF,EAcEC,aAdF,QAeO,oBAfP;AAiBA,eAAe,SAASC,OAAT,CAAiBC,SAAS,GAAG,EAA7B,EAAiCC,MAAM,GAAG,EAA1C,EAA8C;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,gBAAL;AACE,aAAO,EACL,GAAGe,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJC,UAAAA,OAAO,EAAEH,MAAM,CAACI,OAFZ;AAGJC,UAAAA,KAAK,EAAE,EAHH;AAIJC,UAAAA,MAAM,EAAE,EAJJ;AAKJC,UAAAA,SAAS,EAAE,EALP;AAMJC,UAAAA,mBAAmB,EAAE;AANjB;AAFD,OAAP;;AAWF,SAAKf,QAAL;AACE,aAAO,EACL,GAAGM,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJO,UAAAA,IAAI,EAAET,MAAM,CAACI;AAFT;AAFD,OAAP;;AAOF,SAAKnB,kBAAL;AACE,aAAO,EACL,GAAGc,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJK,UAAAA,SAAS,EAAEP,MAAM,CAACI,OAFd;AAGJC,UAAAA,KAAK,EAAE,EAHH;AAIJG,UAAAA,mBAAmB,EAAE,EAJjB;AAKJF,UAAAA,MAAM,EAAE;AALJ;AAFD,OAAP;;AAWF,SAAKpB,cAAL;AACE,aAAO,EACL,GAAGa,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJG,UAAAA,KAAK,EAAEL,MAAM,CAACI;AAFV;AAFD,OAAP;;AAQF,SAAKjB,mBAAL;AACE,aAAO,EACL,GAAGY,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJK,UAAAA,SAAS,EAAER,SAAS,CAACG,IAAV,CAAeK,SAAf,CAAyBG,GAAzB,CAA8BC,IAAD,IAAU;AAChD,gBAAIA,IAAI,CAACC,QAAL,KAAkBZ,MAAM,CAACI,OAAP,CAAeQ,QAArC,EACE,OAAO,EAAE,GAAGD,IAAL;AAAWE,cAAAA,WAAW,EAAEb,MAAM,CAACI,OAAP,CAAeU;AAAvC,aAAP,CADF,KAEK,OAAOH,IAAP;AACN,WAJU;AAFP;AAFD,OAAP;;AAWF,SAAKtB,uBAAL;AACE,aAAO,EACL,GAAGU,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJI,UAAAA,MAAM,EAAE,EAFJ;AAGJE,UAAAA,mBAAmB,EAAE,CACnB,GAAGT,SAAS,CAACG,IAAV,CAAeM,mBADC,EAEnBR,MAAM,CAACI,OAFY;AAHjB;AAFD,OAAP;;AAWF,SAAKd,0BAAL;AACE,aAAO,EACL,GAAGS,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJM,UAAAA,mBAAmB,EAAET,SAAS,CAACG,IAAV,CAAeM,mBAAf,CAAmCO,MAAnC,CACnB,CAAC;AAAEH,YAAAA;AAAF,WAAD,KAAkBA,QAAQ,IAAIZ,MAAM,CAACI,OADlB;AAFjB;AAFD,OAAP;;AASF,SAAKhB,SAAL;AACE,aAAO,EACL,GAAGW,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJI,UAAAA,MAAM,EAAE,CAAC,GAAGP,SAAS,CAACG,IAAV,CAAeI,MAAnB,EAA2BN,MAAM,CAACI,OAAlC;AAFJ;AAFD,OAAP;;AAOF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGG,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJI,UAAAA,MAAM,EAAEP,SAAS,CAACG,IAAV,CAAeI,MAAf,CAAsBS,MAAtB,CACN,CAAC;AAAEC,YAAAA;AAAF,WAAD,KAAYA,EAAE,IAAIhB,MAAM,CAACI,OADnB;AAFJ;AAFD,OAAP;;AASF,SAAKb,SAAL;AACE,aAAO,EACL,GAAGQ,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJe,UAAAA,KAAK,EAAEjB,MAAM,CAACI;AAFV;AAFD,OAAP;;AAOF,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGO,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJgB,UAAAA,OAAO,EAAElB,MAAM,CAACI;AAFZ;AAFD,OAAP;;AAOF,SAAKP,aAAL;AACE,aAAO,EACL,GAAGE,SADE;AAELG,QAAAA,IAAI,EAAE,EACJ,GAAGH,SAAS,CAACG,IADT;AAEJiB,UAAAA,MAAM,EAAEnB,MAAM,CAACI;AAFX;AAFD,OAAP;;AAOF,SAAKT,cAAL;AACE,aAAO,EACL,GAAGI,SADE;AAELG,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE,EADL;AAEJM,UAAAA,IAAI,EAAE,EAFF;AAGJF,UAAAA,SAAS,EAAE,EAHP;AAIJC,UAAAA,mBAAmB,EAAE,EAJjB;AAKJH,UAAAA,KAAK,EAAE,EALH;AAMJC,UAAAA,MAAM,EAAE,EANJ;AAOJW,UAAAA,KAAK,EAAE,EAPH;AAQJC,UAAAA,OAAO,EAAE;AARL,SAFD;AAYLE,QAAAA,OAAO,EAAEpB,MAAM,CAACI;AAZX,OAAP;;AAcF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGK,SADE;AAELsB,QAAAA,MAAM,EAAErB,MAAM,CAACI;AAFV,OAAP;;AAIF;AACE,aAAOL,SAAP;AA3IJ;AA6ID","sourcesContent":["import {\n  ADD_TASK_CONTENT,\n  ADD_TASK_VARIABELS,\n  ADD_TASK_MODEL,\n  ADD_VAR_DESCRIPTION,\n  ADD_GROUP,\n  ADD_ADDITIONAL_VARIABLE,\n  REMOVE_ADDITIONAL_VARIABLE,\n  ADD_CLASS,\n  ADD_SECTION,\n  ADD_NAME,\n  NEW_TASK_ERROR,\n  CLEAR_NEW_TASK,\n  DELETE_GROUP,\n  UPDATE_POINTS,\n} from \"../actions/newTask\";\n\nexport default function reducer(statePart = [], action = {}) {\n  switch (action.type) {\n    case ADD_TASK_CONTENT:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          content: action.payload,\n          model: \"\",\n          groups: [],\n          variables: [],\n          additionalVariables: [],\n        },\n      };\n    case ADD_NAME:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          name: action.payload,\n        },\n      };\n    case ADD_TASK_VARIABELS:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          variables: action.payload,\n          model: \"\",\n          additionalVariables: [],\n          groups: [],\n        },\n      };\n\n    case ADD_TASK_MODEL:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          model: action.payload,\n        },\n      };\n\n    case ADD_VAR_DESCRIPTION:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          variables: statePart.data.variables.map((item) => {\n            if (item.variable === action.payload.variable)\n              return { ...item, description: action.payload.value };\n            else return item;\n          }),\n        },\n      };\n    case ADD_ADDITIONAL_VARIABLE:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          groups: [],\n          additionalVariables: [\n            ...statePart.data.additionalVariables,\n            action.payload,\n          ],\n        },\n      };\n    case REMOVE_ADDITIONAL_VARIABLE:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          additionalVariables: statePart.data.additionalVariables.filter(\n            ({ variable }) => variable != action.payload\n          ),\n        },\n      };\n    case ADD_GROUP:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          groups: [...statePart.data.groups, action.payload],\n        },\n      };\n    case DELETE_GROUP:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          groups: statePart.data.groups.filter(\n            ({ id }) => id != action.payload\n          ),\n        },\n      };\n    case ADD_CLASS:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          class: action.payload,\n        },\n      };\n    case ADD_SECTION:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          section: action.payload,\n        },\n      };\n    case UPDATE_POINTS:\n      return {\n        ...statePart,\n        data: {\n          ...statePart.data,\n          points: action.payload,\n        },\n      };\n    case CLEAR_NEW_TASK:\n      return {\n        ...statePart,\n        data: {\n          content: \"\",\n          name: \"\",\n          variables: [],\n          additionalVariables: [],\n          model: \"\",\n          groups: [],\n          class: \"\",\n          section: \"\",\n        },\n        success: action.payload,\n      };\n    case NEW_TASK_ERROR:\n      return {\n        ...statePart,\n        errors: action.payload,\n      };\n    default:\n      return statePart;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}