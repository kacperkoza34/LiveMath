{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\DisplayTask\\\\OpenTask\\\\OpenTask.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport DisplayContent from './DisplayContent';\nimport DisplayPrompts from './DisplayPrompts';\nimport MathJax from '../../MathJax';\nimport { connect } from 'react-redux';\nimport { getOpenTask } from '../../../../redux/actions/tasks';\n\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst OpenTask = ({\n  match,\n  getOpenTask,\n  accountType,\n  tasks: {\n    data,\n    isFetching,\n    errors,\n    taskConfig: {\n      deadLine,\n      promptsAllowed,\n      usedPrompts,\n      descriptionRequired\n    }\n  }\n}) => {\n  useEffect(() => {\n    getOpenTask(match.params.id);\n  }, []);\n  const [answer, setAnswer] = useState('');\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [randomIndex, setRandomIndex] = useState(null);\n  const [checkAnswer, check] = useState(false);\n  const [answerDescription, setAnswerDescription] = useState('');\n\n  const setGroup = () => {\n    const index = getRandomIntInclusive(0, data.data.groups.length - 1);\n    setRandomIndex(index);\n    setCorrectAnswer(data.data.groups[index].answer);\n  };\n\n  const addAnswer = e => {\n    if (descriptionRequired && !answerDescription.length) {\n      setAnswer('Wymagany opis zadania!');\n    } else {\n      setAnswer(e.target.value);\n      check(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isFetching ? /*#__PURE__*/React.createElement(BeatLoader, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 18\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, data.name), /*#__PURE__*/React.createElement(DisplayContent, {\n    content: data.data.content,\n    variables: data.data.variables,\n    group: data.data.groups[randomIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), randomIndex === null ? setGroup() : '', /*#__PURE__*/React.createElement(\"textarea\", {\n    value: answerDescription,\n    onChange: e => setAnswerDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), (accountType == 'teacher' || promptsAllowed) && /*#__PURE__*/React.createElement(DisplayPrompts, {\n    usedPrompts: usedPrompts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 59\n    }\n  }), /*#__PURE__*/React.createElement(MathJax, {\n    content: answerDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: answer,\n    onChange: e => addAnswer(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), checkAnswer ? correctAnswer == answer ? 'Brawo!' : 'PomyÅ›l o tym jeszcze raz' : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => check(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Dodaj odpowiedz!\")));\n};\n\nOpenTask.propTypes = {};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  accountType: state.user.data.accountType\n});\n\nexport default connect(mapStateToProps, {\n  getOpenTask\n})(OpenTask);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/DisplayTask/OpenTask/OpenTask.js"],"names":["React","useEffect","useState","PropTypes","BeatLoader","DisplayContent","DisplayPrompts","MathJax","connect","getOpenTask","getRandomIntInclusive","min","max","Math","ceil","floor","random","OpenTask","match","accountType","tasks","data","isFetching","errors","taskConfig","deadLine","promptsAllowed","usedPrompts","descriptionRequired","params","id","answer","setAnswer","correctAnswer","setCorrectAnswer","randomIndex","setRandomIndex","checkAnswer","check","answerDescription","setAnswerDescription","setGroup","index","groups","length","addAnswer","e","target","value","name","content","variables","propTypes","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport DisplayContent from './DisplayContent';\r\nimport DisplayPrompts from './DisplayPrompts';\r\nimport MathJax from '../../MathJax';\r\nimport { connect } from 'react-redux';\r\nimport { getOpenTask } from '../../../../redux/actions/tasks';\r\n\r\nconst getRandomIntInclusive = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst OpenTask = ({\r\n  match,\r\n  getOpenTask,\r\n  accountType,\r\n  tasks: {\r\n    data,\r\n    isFetching,\r\n    errors,\r\n    taskConfig: {\r\n      deadLine,\r\n      promptsAllowed,\r\n      usedPrompts,\r\n      descriptionRequired\r\n    }\r\n  }\r\n}) =>{\r\n\r\n  useEffect(()=>{\r\n    getOpenTask(match.params.id);\r\n  },[]);\r\n\r\n  const [answer, setAnswer] = useState('');\r\n  const [correctAnswer, setCorrectAnswer] = useState(null);\r\n  const [randomIndex, setRandomIndex] = useState(null);\r\n  const [checkAnswer, check] = useState(false);\r\n  const [answerDescription, setAnswerDescription] = useState('');\r\n\r\n  const setGroup = () =>{\r\n    const index = getRandomIntInclusive(0,data.data.groups.length-1);\r\n    setRandomIndex(index);\r\n    setCorrectAnswer(data.data.groups[index].answer);\r\n  }\r\n\r\n  const addAnswer = (e) =>{\r\n    if(descriptionRequired && !answerDescription.length){\r\n      setAnswer('Wymagany opis zadania!');\r\n    }\r\n    else {\r\n      setAnswer(e.target.value);\r\n      check(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {isFetching? <BeatLoader size={20}/> :\r\n      <>\r\n        <h4>{data.name}</h4>\r\n        <DisplayContent\r\n          content={data.data.content}\r\n          variables={data.data.variables}\r\n          group={data.data.groups[randomIndex]}\r\n        />\r\n        {randomIndex === null? setGroup() : '' }\r\n        <textarea value={answerDescription} onChange={(e)=>setAnswerDescription(e.target.value)}></textarea>\r\n        { (accountType == 'teacher' || promptsAllowed) && <DisplayPrompts usedPrompts={usedPrompts} /> }\r\n        <MathJax content={answerDescription} />\r\n        <input value={answer} onChange={(e)=>addAnswer(e)}></input>\r\n        { checkAnswer?\r\n          (correctAnswer == answer ? 'Brawo!' : 'PomyÅ›l o tym jeszcze raz') :\r\n          <button onClick={()=>check(true)}>Dodaj odpowiedz!</button>\r\n        }\r\n      </>\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nOpenTask.propTypes = {\r\n\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  tasks: state.tasks,\r\n  accountType: state.user.data.accountType\r\n})\r\n\r\nexport default connect(mapStateToProps,{getOpenTask})(OpenTask);\r\n"]},"metadata":{},"sourceType":"module"}