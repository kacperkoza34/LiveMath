{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pekus\\\\Desktop\\\\desktop\\\\liveMathDemoRedux\\\\client\\\\src\\\\components\\\\tasks\\\\TaskDashboard\\\\TaskDashboard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TaskDashboard.module.scss\";\nimport TasksList from \"../TasksList/TasksList\";\nimport NewTask from \"../NewTask/NewTask\";\nimport { availableClasses } from \"../../../data/TaskDashboardConfig.js\";\nimport { taskSuccess } from \"../../../redux/actions/tasks\";\nimport { connect } from \"react-redux\";\n\nconst TaskDashboard = ({\n  taskSuccess\n}) => {\n  useEffect(() => {\n    taskSuccess({});\n  }, []);\n  const [activeList, setActiveList] = useState(null);\n  const [title, setTitle] = useState(\"Wybierz klase\");\n  const [activeSection, setActiveSection] = useState(null);\n\n  const hideSections = () => {\n    setActiveList(null);\n    setActiveSection(null);\n  };\n\n  const showSections = id => {\n    setActiveList(id);\n    setActiveSection(null);\n  };\n\n  const setList = id => {\n    setActiveList(id);\n    setActiveSection(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NewTask, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.asideWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \"Zadania\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, availableClasses.map(({\n    name,\n    id,\n    sections\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    className: id == activeList ? styles.btnListActive : styles.btnList,\n    onClick: () => {\n      id == activeList ? hideSections() : setList(id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  }, name)), id == activeList && /*#__PURE__*/React.createElement(\"ul\", {\n    className: styles.subList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, sections.map(section => /*#__PURE__*/React.createElement(\"li\", {\n    className: activeSection == section.id ? styles.btnListActive : styles.btnList,\n    onClick: () => setActiveSection(section.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }\n  }, section.name))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.contentWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TasksList, {\n    classId: activeList,\n    sectionId: activeSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default connect(null, {\n  taskSuccess\n})(TaskDashboard);","map":{"version":3,"sources":["C:/Users/pekus/Desktop/desktop/liveMathDemoRedux/client/src/components/tasks/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","PropTypes","styles","TasksList","NewTask","availableClasses","taskSuccess","connect","TaskDashboard","activeList","setActiveList","title","setTitle","activeSection","setActiveSection","hideSections","showSections","id","setList","root","wrapper","asideWrapper","map","name","sections","btnListActive","btnList","subList","section","contentWrapper"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TaskDashboard.module.scss\";\nimport TasksList from \"../TasksList/TasksList\";\nimport NewTask from \"../NewTask/NewTask\";\nimport { availableClasses } from \"../../../data/TaskDashboardConfig.js\";\nimport { taskSuccess } from \"../../../redux/actions/tasks\";\nimport { connect } from \"react-redux\";\n\nconst TaskDashboard = ({ taskSuccess }) => {\n  useEffect(() => {\n    taskSuccess({});\n  }, []);\n\n  const [activeList, setActiveList] = useState(null);\n  const [title, setTitle] = useState(\"Wybierz klase\");\n  const [activeSection, setActiveSection] = useState(null);\n\n  const hideSections = () => {\n    setActiveList(null);\n    setActiveSection(null);\n  };\n  const showSections = (id) => {\n    setActiveList(id);\n    setActiveSection(null);\n  };\n  const setList = (id) => {\n    setActiveList(id);\n    setActiveSection(null);\n  };\n  return (\n    <div className={styles.root}>\n      <NewTask />\n      <div className={styles.wrapper}>\n        <div className={styles.asideWrapper}>\n          <h2>Zadania</h2>\n          <ul>\n            {availableClasses.map(({ name, id, sections }) => (\n              <>\n                <li\n                  className={\n                    id == activeList ? styles.btnListActive : styles.btnList\n                  }\n                  onClick={() => {\n                    id == activeList ? hideSections() : setList(id);\n                  }}\n                >\n                  <span>{name}</span>\n                </li>\n                {id == activeList && (\n                  <ul className={styles.subList}>\n                    {sections.map((section) => (\n                      <li\n                        className={\n                          activeSection == section.id\n                            ? styles.btnListActive\n                            : styles.btnList\n                        }\n                        onClick={() => setActiveSection(section.id)}\n                      >\n                        {section.name}\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </>\n            ))}\n          </ul>\n        </div>\n        <div className={styles.contentWrapper}>\n          <TasksList classId={activeList} sectionId={activeSection} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(null, { taskSuccess })(TaskDashboard);\n"]},"metadata":{},"sourceType":"module"}